// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen_uber -source=interfaces.go -destination=mocks/library_mock.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/project/library/internal/entity"
	gomock "go.uber.org/mock/gomock"
)

// MockAuthorRepository is a mock of AuthorRepository interface.
type MockAuthorRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorRepositoryMockRecorder
	isgomock struct{}
}

// MockAuthorRepositoryMockRecorder is the mock recorder for MockAuthorRepository.
type MockAuthorRepositoryMockRecorder struct {
	mock *MockAuthorRepository
}

// NewMockAuthorRepository creates a new mock instance.
func NewMockAuthorRepository(ctrl *gomock.Controller) *MockAuthorRepository {
	mock := &MockAuthorRepository{ctrl: ctrl}
	mock.recorder = &MockAuthorRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorRepository) EXPECT() *MockAuthorRepositoryMockRecorder {
	return m.recorder
}

// CreateAuthor mocks base method.
func (m *MockAuthorRepository) CreateAuthor(ctx context.Context, author entity.Author) (entity.Author, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthor", ctx, author)
	ret0, _ := ret[0].(entity.Author)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAuthor indicates an expected call of CreateAuthor.
func (mr *MockAuthorRepositoryMockRecorder) CreateAuthor(ctx, author any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).CreateAuthor), ctx, author)
}

// GetAuthorInfo mocks base method.
func (m *MockAuthorRepository) GetAuthorInfo(ctx context.Context, id string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorInfo", ctx, id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorInfo indicates an expected call of GetAuthorInfo.
func (mr *MockAuthorRepositoryMockRecorder) GetAuthorInfo(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorInfo", reflect.TypeOf((*MockAuthorRepository)(nil).GetAuthorInfo), ctx, id)
}

// UpdateAuthor mocks base method.
func (m *MockAuthorRepository) UpdateAuthor(ctx context.Context, id, authorName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthor", ctx, id, authorName)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthor indicates an expected call of UpdateAuthor.
func (mr *MockAuthorRepositoryMockRecorder) UpdateAuthor(ctx, id, authorName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthor", reflect.TypeOf((*MockAuthorRepository)(nil).UpdateAuthor), ctx, id, authorName)
}

// MockBooksRepository is a mock of BooksRepository interface.
type MockBooksRepository struct {
	ctrl     *gomock.Controller
	recorder *MockBooksRepositoryMockRecorder
	isgomock struct{}
}

// MockBooksRepositoryMockRecorder is the mock recorder for MockBooksRepository.
type MockBooksRepositoryMockRecorder struct {
	mock *MockBooksRepository
}

// NewMockBooksRepository creates a new mock instance.
func NewMockBooksRepository(ctrl *gomock.Controller) *MockBooksRepository {
	mock := &MockBooksRepository{ctrl: ctrl}
	mock.recorder = &MockBooksRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBooksRepository) EXPECT() *MockBooksRepositoryMockRecorder {
	return m.recorder
}

// CreateBook mocks base method.
func (m *MockBooksRepository) CreateBook(ctx context.Context, book entity.Book) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBook", ctx, book)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBook indicates an expected call of CreateBook.
func (mr *MockBooksRepositoryMockRecorder) CreateBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBook", reflect.TypeOf((*MockBooksRepository)(nil).CreateBook), ctx, book)
}

// GetAuthorBooks mocks base method.
func (m *MockBooksRepository) GetAuthorBooks(ctx context.Context, authorID string) ([]entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorBooks", ctx, authorID)
	ret0, _ := ret[0].([]entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorBooks indicates an expected call of GetAuthorBooks.
func (mr *MockBooksRepositoryMockRecorder) GetAuthorBooks(ctx, authorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorBooks", reflect.TypeOf((*MockBooksRepository)(nil).GetAuthorBooks), ctx, authorID)
}

// GetBook mocks base method.
func (m *MockBooksRepository) GetBook(ctx context.Context, bookID string) (entity.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBook", ctx, bookID)
	ret0, _ := ret[0].(entity.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBook indicates an expected call of GetBook.
func (mr *MockBooksRepositoryMockRecorder) GetBook(ctx, bookID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBook", reflect.TypeOf((*MockBooksRepository)(nil).GetBook), ctx, bookID)
}

// UpdateBook mocks base method.
func (m *MockBooksRepository) UpdateBook(ctx context.Context, book entity.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBook", ctx, book)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateBook indicates an expected call of UpdateBook.
func (mr *MockBooksRepositoryMockRecorder) UpdateBook(ctx, book any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBook", reflect.TypeOf((*MockBooksRepository)(nil).UpdateBook), ctx, book)
}
